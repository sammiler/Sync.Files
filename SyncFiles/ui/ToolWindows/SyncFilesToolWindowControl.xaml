<UserControl x:Class="SyncFiles.UI.ToolWindows.SyncFilesToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:SyncFiles.UI.ToolWindows"
             xmlns:viewModels="clr-namespace:SyncFiles.UI.ViewModels"
             xmlns:shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0" 
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="350"
             d:DataContext="{d:DesignInstance Type=viewModels:SyncFilesToolWindowViewModel, IsDesignTimeCreatable=True}"
             Background="{DynamicResource {x:Static shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
             Foreground="{DynamicResource {x:Static shell:EnvironmentColors.ToolWindowTextBrushKey}}">

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <!-- Style for TreeViewItems to apply context menus -->
        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="Focusable" Value="True"/>
            <EventSetter Event="MouseDoubleClick" Handler="TreeViewItem_MouseDoubleClick"/>
            <!-- ContextMenu will be set via triggers based on DataContext type -->
        </Style>

        <!-- ContextMenu for ScriptGroupViewModel -->
        <ContextMenu x:Key="ScriptGroupContextMenu"
                     DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Rename Group" Command="{Binding RenameGroupCommand}"
                      IsEnabled="{Binding IsScriptGroupAndNotDefault}"/>
            <MenuItem Header="Delete Group" Command="{Binding DeleteGroupCommand}"
                      IsEnabled="{Binding IsScriptGroupAndNotDefault}"/>
            <!-- Add other group-specific commands here if any -->
        </ContextMenu>

        <!-- ContextMenu for ScriptEntryViewModel -->
        <ContextMenu x:Key="ScriptEntryContextMenu"
                     DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Execute" Command="{Binding ExecuteCommand}" IsEnabled="{Binding CanExecuteScript}"/>
            <MenuItem Header="Open File" Command="{Binding OpenScriptFileCommand}" IsEnabled="{Binding CanExecuteScript}"/>
            <Separator/>
            <MenuItem Header="Set Execution Mode" IsEnabled="{Binding CanExecuteScript}">
                <MenuItem Header="Run in Terminal" Command="{Binding SetExecutionModeToTerminalCommand}" 
                          IsChecked="{Binding IsExecutionModeTerminal, Mode=OneWay}"/>
                <MenuItem Header="Run and Capture Output" Command="{Binding SetExecutionModeToDirectApiCommand}" 
                          IsChecked="{Binding IsExecutionModeDirectApi, Mode=OneWay}"/>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Set Alias..." Command="{Binding SetAliasCommand}" IsEnabled="{Binding CanExecuteScript}"/>
            <MenuItem Header="Set Description..." Command="{Binding SetDescriptionCommand}" IsEnabled="{Binding CanExecuteScript}"/>
            <Separator/>
            <MenuItem Header="Move to Group..." Command="{Binding MoveToGroupCommand}" IsEnabled="{Binding CanExecuteScript}"/>
            <MenuItem Header="Remove from this Group" Command="{Binding RemoveFromGroupCommand}" IsEnabled="{Binding CanExecuteScript}"/>
        </ContextMenu>

    </UserControl.Resources>

    <!-- DataContext is set in code-behind by SyncFilesPackage -->

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <!-- Toolbar -->
            <RowDefinition Height="*"/>
            <!-- TreeView -->
            <RowDefinition Height="Auto"/>
            <!-- Status/Log Area (Optional) -->
        </Grid.RowDefinitions>

        <!-- 1. Toolbar -->
        <ToolBar Grid.Row="0" Height="Auto" Padding="2"
                 Background="{DynamicResource {x:Static shell:EnvironmentColors.CommandBarGradientBeginBrushKey}}">
            <Button Command="{Binding RefreshScriptsCommand}" ToolTip="Refresh Scripts, Workspace and Settings">
                <TextBlock Text="♻️" FontSize="14"/>
            </Button>
            <Button Command="{Binding AddGroupCommand}" ToolTip="Add New Script Group">
                <TextBlock Text="➕G" FontSize="14"/>
            </Button>
            <Separator/>
            <Button Command="{Binding SyncGitHubFilesCommand}" ToolTip="Sync GitHub Files Now">
                <TextBlock Text="🔄Git" FontSize="14"/>
            </Button>
            <Separator/>
            <Button Command="{Binding LoadSmartWorkflowCommand}" ToolTip="Load Smart Workflow from URL">
                <TextBlock Text="💡WF" FontSize="14"/>
            </Button>
            <!-- Optional: Button to save settings if not auto-saving -->
            <!-- 
            <Separator/>
            <Button Command="{Binding SaveSettingsCommand}" ToolTip="Save All Settings">
                <TextBlock Text="💾" FontSize="14"/>
            </Button>
            -->
        </ToolBar>

        <!-- 2. TreeView for Scripts -->
        <TreeView Grid.Row="1"
                  ItemsSource="{Binding ScriptGroups}"
                  BorderThickness="0,1,0,0"
                  BorderBrush="{DynamicResource {x:Static shell:EnvironmentColors.ToolWindowBorderBrushKey}}"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                    <!-- BasedOn to inherit default style + our setters -->
                    <!-- Apply specific ContextMenu based on the type of the DataContext -->
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DataContext.IsScriptGroup, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="ContextMenu" Value="{StaticResource ScriptGroupContextMenu}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DataContext.IsScriptEntry, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="ContextMenu" Value="{StaticResource ScriptEntryContextMenu}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>

            <TreeView.Resources>
                <!-- HierarchicalDataTemplate for ScriptGroupViewModel -->
                <HierarchicalDataTemplate DataType="{x:Type viewModels:ScriptGroupViewModel}"
                                          ItemsSource="{Binding Scripts}">
                    <StackPanel Orientation="Horizontal">
                        <!-- TODO: Replace Text with proper folder icon from VS Image Service or your resources -->
                        <TextBlock Text="📁" Margin="0,0,5,0" VerticalAlignment="Center"/>
                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Name}" VerticalAlignment="Center"/>
                    </StackPanel>
                </HierarchicalDataTemplate>

                <!-- DataTemplate for ScriptEntryViewModel -->
                <DataTemplate DataType="{x:Type viewModels:ScriptEntryViewModel}">
                    <StackPanel Orientation="Horizontal" ToolTip="{Binding PathAndMissingToolTipText}">
                        <Image Width="16" Height="16" Margin="0,0,5,0" VerticalAlignment="Center">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Source" Value="/SyncFiles;component/Resources/PythonFileIcon.png"/>
                                    <!-- ADJUST ASSEMBLY NAME IF NEEDED -->
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                            <Setter Property="Source" Value="/SyncFiles;component/Resources/WarningIcon.png"/>
                                            <!-- ADJUST ASSEMBLY NAME IF NEEDED -->
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="{Binding DisplayNameWithStatus}" VerticalAlignment="Center">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <!-- Foreground is inherited from UserControl's Foreground -->
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </DataTemplate>
            </TreeView.Resources>
        </TreeView>

        <!-- 3. Optional Status/Log Area -->
        <StatusBar Grid.Row="2" Background="{DynamicResource {x:Static shell:EnvironmentColors.StatusBarDefaultBrushKey}}">
            <StatusBarItem>
                <TextBlock Text="{Binding StatusMessage}" 
                           Foreground="{DynamicResource {x:Static shell:EnvironmentColors.StatusBarTextBrushKey}}" 
                           Margin="3,0"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right" Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ProgressBar IsIndeterminate="True" Width="100" Height="10" Margin="3,0"/>
            </StatusBarItem>
        </StatusBar>
        <!-- Or a richer log display:
        <ListBox Grid.Row="2" ItemsSource="{Binding LogMessages}" MaxHeight="100" Margin="2"
                 BorderBrush="{DynamicResource {x:Static shell:EnvironmentColors.ToolWindowBorderBrushKey}}"
                 BorderThickness="0,1,0,0"
                 ScrollViewer.VerticalScrollBarVisibility="Auto"/>
        -->
    </Grid>
</UserControl>