<UserControl x:Class="SyncFiles.UI.ToolWindows.SyncFilesToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:SyncFiles.UI.ToolWindows"
             xmlns:viewModels="clr-namespace:SyncFiles.UI.ViewModels"
             xmlns:shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:controls="clr-namespace:SyncFiles.UI.Controls"
             mc:Ignorable="d"
             d:DesignHeight="600" d:DesignWidth="400">

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <!-- 1. 首先定义颜色资源 -->
        <SolidColorBrush x:Key="DarkBackgroundBrush" Color="#2D2D2D"/>
        <SolidColorBrush x:Key="DarkBorderBrush" Color="#404040"/>
        <SolidColorBrush x:Key="DarkForegroundBrush" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="DarkDisabledBrush" Color="#808080"/>
        <SolidColorBrush x:Key="DarkHoverBrush" Color="#3D3D3D"/>
        <SolidColorBrush x:Key="DarkSelectedBrush" Color="#404040"/>

        <!-- 2. 基础控件样式 -->
        <!-- MenuItem样式 - 重写以移除选择框按钮 -->
        <Style x:Key="DarkMenuItemStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="Background" Value="{StaticResource DarkBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <!-- 移除左侧选择框按钮，只保留内容区 -->
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                </Grid.ColumnDefinitions>

                                <!-- 菜单项主体内容 -->
                                <ContentPresenter x:Name="ContentPresenter"
                                                Grid.Column="0"
                                                Margin="10,3,30,3"
                                                ContentSource="Header"
                                                RecognizesAccessKey="True"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                                <!-- 子菜单箭头 -->
                                <Path x:Name="SubMenuPath"
                                      Grid.Column="1"
                                      Margin="4,0,6,0"
                                      VerticalAlignment="Center"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="M0,0 L0,8 L4,4 Z"
                                      Visibility="Collapsed"/>

                                <!-- 子菜单弹出项 -->
                                <Popup x:Name="SubMenuPopup"
                                       Placement="Right"
                                       HorizontalOffset="-1"
                                       VerticalOffset="-3"
                                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       PopupAnimation="Fade">
                                    <Border x:Name="SubMenuBorder"
                                            Background="{StaticResource DarkBackgroundBrush}"
                                            BorderBrush="{StaticResource DarkBorderBrush}"
                                            BorderThickness="1">
                                        <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <ItemsPresenter x:Name="ItemsPresenter"/>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- 鼠标悬停效果 -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource DarkHoverBrush}"/>
                            </Trigger>
                            
                            <!-- 禁用状态效果 -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{StaticResource DarkDisabledBrush}"/>
                            </Trigger>

                            <!-- 显示子菜单箭头 -->
                            <Trigger Property="HasItems" Value="True">
                                <Setter Property="Visibility" TargetName="SubMenuPath" Value="Visible"/>
                            </Trigger>

                            <!-- 选中状态 -->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource DarkSelectedBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 3. ContextMenu样式 - 依赖于MenuItem样式 -->
        <Style x:Key="DarkContextMenuStyle" TargetType="{x:Type ContextMenu}">
            <Setter Property="Background" Value="{StaticResource DarkBackgroundBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource DarkBorderBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border x:Name="Border"
                                Background="{StaticResource DarkBackgroundBrush}"
                                BorderBrush="{StaticResource DarkBorderBrush}"
                                BorderThickness="1">
                            <ScrollViewer x:Name="ScrollViewer" 
                                        Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <ItemsPresenter x:Name="ItemsPresenter"
                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                              Grid.IsSharedSizeScope="True"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border x:Name="Border"
                                            Background="{StaticResource DarkBackgroundBrush}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                                                <ColumnDefinition Width="13"/>
                                            </Grid.ColumnDefinitions>

                                            <!-- 图标区域 -->
                                            <Border x:Name="IconBorder" 
                                                    Width="32" 
                                                    Background="{StaticResource DarkBackgroundBrush}">
                                                <ContentPresenter x:Name="Icon" 
                                                                VerticalAlignment="Center"
                                                                ContentSource="Icon"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>

                                            <!-- 标题区域 -->
                                            <ContentPresenter x:Name="HeaderHost"
                                                            Grid.Column="1"
                                                            ContentSource="Header"
                                                            RecognizesAccessKey="True"
                                                            Margin="5,3,5,3"
                                                            VerticalAlignment="Center"/>

                                            <!-- 子菜单箭头 -->
                                            <Grid x:Name="ArrowPanel" 
                                                  Grid.Column="3" 
                                                  Visibility="Collapsed"
                                                  Margin="4,0,0,0" 
                                                  VerticalAlignment="Center">
                                                <Path x:Name="ArrowPanelPath"
                                                      HorizontalAlignment="Right"
                                                      Fill="{TemplateBinding Foreground}"
                                                      Data="M0,0 L0,8 L4,4 Z"/>
                                            </Grid>

                                            <!-- 子菜单弹出 -->
                                            <Popup x:Name="SubMenuPopup"
                                                   Placement="Right"
                                                   HorizontalOffset="-1"
                                                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                                                   AllowsTransparency="True"
                                                   Focusable="False"
                                                   PopupAnimation="Fade">
                                                <Border x:Name="SubMenuBorder"
                                                        Background="{StaticResource DarkBackgroundBrush}"
                                                        BorderBrush="{StaticResource DarkBorderBrush}"
                                                        BorderThickness="1">
                                                    <ScrollViewer CanContentScroll="True"
                                                                Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                        <ItemsPresenter x:Name="ItemsPresenter"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </Popup>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsHighlighted" Value="true">
                                            <Setter Property="Background" TargetName="Border" Value="{StaticResource DarkHoverBrush}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{StaticResource DarkDisabledBrush}"/>
                                        </Trigger>
                                        <Trigger Property="HasItems" Value="True">
                                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Visible"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Separator样式 -->
        <Style x:Key="DarkSeparatorStyle" TargetType="{x:Type Separator}">
            <Setter Property="Background" Value="{StaticResource DarkBorderBrush}"/>
            <Setter Property="Margin" Value="0,2"/>
            <Setter Property="Height" Value="1"/>
        </Style>

        <!-- 4. 展开按钮样式 -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16" Height="16" Background="Transparent">
                            <Path x:Name="arrow" 
                                  Fill="{StaticResource DarkForegroundBrush}"
                                  Data="M 0 0 L 4 4 L 0 8 Z"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="arrow" Property="Data" 
                                        Value="M 0 0 L 8 0 L 4 4 Z"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 5. TreeViewItem样式 - 最后定义，因为它依赖于其他所有样式 -->
        <Style x:Key="CustomTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
            <EventSetter Event="MouseDoubleClick" Handler="TreeViewItem_MouseDoubleClick"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            
                            <ToggleButton x:Name="Expander"
                                        ClickMode="Press"
                                        IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource ExpandCollapseToggleStyle}"
                                        Width="16" Height="16"
                                        Visibility="{Binding HasItems, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                            <Border x:Name="Bd" Grid.Column="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Header"
                                                ContentSource="Header"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                            
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Margin="16,0,0,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource DarkSelectedBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu Style="{StaticResource DarkContextMenuStyle}"
                                 DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                        <!-- 脚本项的菜单 -->
                        <MenuItem Header="执行" Command="{Binding ExecuteCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="打开文件" Command="{Binding OpenScriptFileCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <Separator Style="{StaticResource DarkSeparatorStyle}" Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="设置执行模式" 
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <MenuItem Header="在终端运行" Command="{Binding SetExecutionModeToTerminalCommand}"
                                      Style="{StaticResource DarkMenuItemStyle}"
                                      IsChecked="{Binding IsExecutionModeTerminal, Mode=OneWay}"/>
                            <MenuItem Header="运行并捕获输出" Command="{Binding SetExecutionModeToDirectApiCommand}"
                                      Style="{StaticResource DarkMenuItemStyle}"
                                      IsChecked="{Binding IsExecutionModeDirectApi, Mode=OneWay}"/>
                        </MenuItem>
                        <Separator Style="{StaticResource DarkSeparatorStyle}" Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="设置别名..." Command="{Binding SetAliasCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="设置描述..." Command="{Binding SetDescriptionCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <Separator Style="{StaticResource DarkSeparatorStyle}" Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="移动到组..." Command="{Binding MoveToGroupCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="从此组移除" Command="{Binding RemoveFromGroupCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  IsEnabled="{Binding CanExecuteScript}"
                                  Visibility="{Binding IsScriptEntry, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        
                        <!-- 组的菜单项 -->
                        <MenuItem Header="重命名组" Command="{Binding RenameGroupCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  Visibility="{Binding IsScriptGroupAndNotDefault, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <MenuItem Header="删除组" Command="{Binding DeleteGroupCommand}"
                                  Style="{StaticResource DarkMenuItemStyle}"
                                  Visibility="{Binding IsScriptGroupAndNotDefault, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </ContextMenu>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <!-- 设置根Grid的背景色 -->
    <Grid Background="{StaticResource DarkBackgroundBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ToolBar Grid.Row="0" Height="Auto" Padding="2" Background="{StaticResource DarkBackgroundBrush}">
            <Button Command="{Binding RefreshScriptsCommand}" ToolTip="刷新脚本、工作区和设置" Padding="3" Margin="1" Background="Transparent">
                <Image Source="{Binding RefreshIconPath}" Width="16" Height="16" Stretch="Uniform"/>
            </Button>
            <Button Command="{Binding AddGroupCommand}" ToolTip="添加新的脚本组" Padding="3" Margin="1" Background="Transparent">
                <Image Source="{Binding AddGroupIconPath}" Width="16" Height="16" Stretch="Uniform"/>
            </Button>
            <Separator/>
            <Button Command="{Binding SyncGitHubFilesCommand}" ToolTip="立即同步GitHub文件" Padding="3" Margin="1" Background="Transparent">
                <Image Source="{Binding SyncGitIconPath}" Width="16" Height="16" Stretch="Uniform"/>
            </Button>
            <Button Command="{Binding ToggleScriptOutputVisibilityCommand}" ToolTip="切换脚本输出面板的显示/隐藏" Padding="3" Margin="1" Background="Transparent">
                <Image Source="{Binding ToggleOutputIconPath}" Width="16" Height="16" Stretch="Uniform"/>
            </Button>
        </ToolBar>

        <TreeView Grid.Row="1"
                  ItemsSource="{Binding ScriptGroups}"
                  Background="Transparent"
                  BorderThickness="0,1,0,0"
                  BorderBrush="{StaticResource DarkBorderBrush}"
                  ItemContainerStyle="{StaticResource CustomTreeViewItemStyle}"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type viewModels:ScriptGroupViewModel}"
                                          ItemsSource="{Binding Scripts}">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding FolderIconPath}" Width="16" Height="16" Margin="0,0,5,0" VerticalAlignment="Center" Stretch="Uniform"/>
                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Name}" VerticalAlignment="Center" Foreground="{StaticResource DarkForegroundBrush}"/>
                    </StackPanel>
                </HierarchicalDataTemplate>

                <DataTemplate DataType="{x:Type viewModels:ScriptEntryViewModel}">
                    <StackPanel Orientation="Horizontal" ToolTip="{Binding PathAndMissingToolTipText}">
                        <Image Width="16" Height="16" Margin="0,0,5,0" VerticalAlignment="Center" Source="{Binding NormalScriptIconPath}">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                            <Setter Property="Source" Value="{Binding WarningScriptIconPath}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="{Binding DisplayNameWithStatus}" VerticalAlignment="Center" Foreground="{StaticResource DarkForegroundBrush}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </DataTemplate>
            </TreeView.Resources>
        </TreeView>

        <GridSplitter Grid.Row="2" Height="5" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                      Background="{StaticResource DarkBorderBrush}"
                      ShowsPreview="True"
                      Visibility="{Binding IsScriptOutputVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        <Grid Grid.Row="3"
              Background="{StaticResource DarkBackgroundBrush}"
              Visibility="{Binding IsScriptOutputVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              MinHeight="100" MaxHeight="300">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <ToolBar Grid.Row="0" Padding="2" Background="{StaticResource DarkBackgroundBrush}">
                <TextBlock Text="脚本输出" Margin="5,0" VerticalAlignment="Center" Foreground="White"/>
                <Button Command="{Binding ClearScriptOutputCommand}" ToolTip="清除输出" Padding="3" Margin="1" Background="Transparent">
                    <TextBlock Text="🗑️" FontSize="14" VerticalAlignment="Center"/>
                </Button>
            </ToolBar>

            <ListBox Grid.Row="1" ItemsSource="{Binding ScriptOutputLog}"
                     Background="{StaticResource DarkBackgroundBrush}"
                     BorderBrush="{StaticResource DarkBorderBrush}"
                     BorderThickness="0,1,0,0"
                     HorizontalContentAlignment="Stretch"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ScrollViewer.VerticalScrollBarVisibility="Auto">
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type viewModels:ScriptExecutionOutputLine}">
                        <TextBlock Text="{Binding DisplayLine}" TextWrapping="Wrap">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Foreground" Value="White"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsError}" Value="True">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>

        <GridSplitter Grid.Row="4" Height="5" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                      Background="{StaticResource DarkBorderBrush}"
                      ShowsPreview="True"/>

        <Grid Grid.Row="5" Background="{StaticResource DarkBackgroundBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <ToolBar Grid.Row="0" Padding="2" Background="{StaticResource DarkBackgroundBrush}">
                <TextBlock Text="嵌入式终端" Margin="5,0" VerticalAlignment="Center" Foreground="{StaticResource DarkForegroundBrush}"/>
                <Button Click="ClearTerminal_Click" ToolTip="清除终端" Padding="3" Margin="1" Background="Transparent">
                    <TextBlock Text="清除" Foreground="{StaticResource DarkForegroundBrush}"/>
                </Button>
                <Button Click="StopProcess_Click" ToolTip="终止当前进程" Padding="3" Margin="1" Background="Transparent">
                    <TextBlock Text="终止进程" Foreground="{StaticResource DarkForegroundBrush}"/>
                </Button>
            </ToolBar>

            <controls:PtyTerminalControl x:Name="terminalControl" Grid.Row="1"/>
        </Grid>

        <StatusBar Grid.Row="6" Background="{StaticResource DarkBackgroundBrush}">
            <StatusBarItem>
                <TextBlock Text="{Binding StatusMessage}"
                           Foreground="{StaticResource DarkForegroundBrush}"
                           Margin="3,0"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right" Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ProgressBar IsIndeterminate="True" Width="100" Height="10" Margin="3,0"
                              Background="{StaticResource DarkBackgroundBrush}"
                              BorderBrush="{StaticResource DarkBorderBrush}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>